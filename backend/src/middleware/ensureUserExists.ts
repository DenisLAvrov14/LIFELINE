import { Request, Response, NextFunction } from "express";
import pool from "../services/db.connection";

export const ensureUserExists = async (
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  const userId = (req as any).userId;
  const tokenPayload = (req as any).keycloakToken;

  if (!userId || !tokenPayload) {
    console.error(
      "‚ùå [ensureUserExists] –û—à–∏–±–∫–∞: User ID –∏–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
    );
    return res
      .status(401)
      .json({ error: "Unauthorized: Token payload is missing" });
  }

  const preferredUsername = tokenPayload.preferred_username || "Unknown";
  const email = tokenPayload.email || "unknown@example.com";

  try {
    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ ID
    const queryById = `SELECT id FROM users WHERE id = $1`;
    const resultById = await pool.query(queryById, [userId]);

    if ((resultById.rowCount ?? 0) > 0) {
      console.log(`üü¢ [ensureUserExists] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ ID: ${userId}`);
      return next(); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º email (–≤–¥—Ä—É–≥ ID —Ä–∞–∑–Ω—ã–π, –Ω–æ email —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
    const queryByEmail = `SELECT id FROM users WHERE email = $1`;
    const resultByEmail = await pool.query(queryByEmail, [email]);

    if ((resultByEmail.rowCount ?? 0) > 0) {
      console.log(
        `üü¢ [ensureUserExists] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ email: ${email}`,
      );
      return next(); // Email —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }

    // üîÑ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    console.log(
      `üü° [ensureUserExists] –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${preferredUsername} (${email})`,
    );
    const insertQuery = `
            INSERT INTO users (id, username, email)
            VALUES ($1, $2, $3)
        `;
    await pool.query(insertQuery, [userId, preferredUsername, email]);
    console.log(
      `‚úÖ [ensureUserExists] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${preferredUsername}`,
    );

    next();
  } catch (error: any) {
    console.error(
      "‚ùå [ensureUserExists] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
      error.message,
    );
    return res.status(500).json({ error: error.message });
  }
};
